@page "/reparations"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

<h3>Reparations</h3>

@if (Reparations == null)
{
    <p>Loading...</p>
}
else
{
    <a href="/reparations/create" class="btn btn-primary">New Reparation</a>
    <table class="table">
        <thead>
            <tr>
                <th>DeviceType</th>
                <th>Brand</th>
                <th>OwnerName</th>
                <th>OwnerLastName</th>
                <th>OwnerPhone</th>
                <th>Email</th>
                <th>DamageDiagnosis</th>
                <th>TechnicalComents</th>
                <th>RepairStatus</th>
                <th>RepairValue</th>
                <th>DateStarted</th>
                <th>DateFinished</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var reparation in Reparations)
            {
                <tr>
                    <td>@reparation.DeviceType</td>
                    <td>@reparation.Brand</td>
                    <td>@reparation.OwnerName</td>
                    <td>@reparation.OwnerLastName</td>
                    <td>@reparation.OwnerPhone</td>
                    <td>@reparation.Email</td>
                    <td>@reparation.DamageDiagnosis</td>
                    <td>@reparation.TechnicalComents</td>
                    <td>@($"{reparation.DateStarted:yyyy/MM/dd}")</td>
                    <td>@($"{reparation.DateFinished:yyyy/MM/dd}")</td>
                    <td>@($"{reparation.RepairValue:c2}")</td>
                    <td>@reparation.RepairStatus</td>
                    <td>
                        <a href="/reparations/edit/@reparation.Id" class="btn btn-warning">Edit</a>
                        <button class="btn btn-info">Complete</button>
                        <button class="btn btn-danger" @onclick=@(() => DeleteAsync(reparation))>Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    public List<MyReparation>? Reparations { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var response = await repository.GetAsync<List<MyReparation>>("api/MyReparations");
        if (response.IsSuccess)
        {
            Reparations = response.Result;
        }
    }

    private async Task DeleteAsync(MyReparation myReparation)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmed",
            Text = "Are u sure to delete this item?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true
        });

        var responseHttp = await repository.DeleteAsync<MyReparation>($"api/MyReparations/{myReparation.Id}");

        if (!responseHttp.IsSuccess)
        {
            await sweetAlertService.FireAsync("Error", responseHttp.Message, SweetAlertIcon.Error);
            return;
        }

        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowCloseButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Info, message: "Equipement deleted successfully.");
    }
}
